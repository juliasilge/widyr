[{"path":[]},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://juliasilge.github.io/widyr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://juliasilge.github.io/widyr/articles/intro.html","id":"towards-a-precise-definition-of-wide-data","dir":"Articles","previous_headings":"","what":"Towards a precise definition of “wide” data","title":"widyr: Widen, process, and re-tidy a dataset","text":"term “wide data” gone fashion “imprecise” (Wickham 2014)), think proper definition term entirely meaningful useful. wide dataset one matrices : row one item column one feature value one observation matrix one variable want data wide rather tidy? Notable examples include classification, clustering, correlation, factorization, operations can take advantage matrix structure. general, want compare items rather compare variables, useful structure. widyr package based observation tidy data analysis, often want data wide temporarily, returning tidy structure visualization analysis. widyr makes easy set pairwise_ functions.","code":""},{"path":"https://juliasilge.github.io/widyr/articles/intro.html","id":"example-gapminder","dir":"Articles","previous_headings":"","what":"Example: gapminder","title":"widyr: Widen, process, and re-tidy a dataset","text":"Consider gapminder dataset gapminder package. tidy format (one-row-per-country-per-year) useful grouping, summarizing, filtering operations. want compare pairs countries (example, find countries similar ), reshape dataset. Note , country item, year feature column.","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(gapminder)  gapminder ## # A tibble: 1,704 × 6 ##    country     continent  year lifeExp      pop gdpPercap ##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl> ##  1 Afghanistan Asia       1952    28.8  8425333      779. ##  2 Afghanistan Asia       1957    30.3  9240934      821. ##  3 Afghanistan Asia       1962    32.0 10267083      853. ##  4 Afghanistan Asia       1967    34.0 11537966      836. ##  5 Afghanistan Asia       1972    36.1 13079460      740. ##  6 Afghanistan Asia       1977    38.4 14880372      786. ##  7 Afghanistan Asia       1982    39.9 12881816      978. ##  8 Afghanistan Asia       1987    40.8 13867957      852. ##  9 Afghanistan Asia       1992    41.7 16317921      649. ## 10 Afghanistan Asia       1997    41.8 22227415      635. ## # … with 1,694 more rows"},{"path":"https://juliasilge.github.io/widyr/articles/intro.html","id":"pairwise-operations","dir":"Articles","previous_headings":"Example: gapminder","what":"Pairwise operations","title":"widyr: Widen, process, and re-tidy a dataset","text":"widyr package offers pairwise_ functions operate pairs items within data. example pairwise_dist: single step, finds Euclidean distance lifeExp value pair countries, matching pairs based year. find closest pairs countries overall arrange(): Notice includes duplicates (Germany/Belgium Belgium/Germany). avoid (upper triangle distance matrix), use upper = FALSE: analyses, may interested correlation rather distance pairs. use pairwise_cor:","code":"library(widyr)  gapminder %>%   pairwise_dist(country, year, lifeExp) ## # A tibble: 20,022 × 3 ##    item1      item2       distance ##    <fct>      <fct>          <dbl> ##  1 Albania    Afghanistan   107.   ##  2 Algeria    Afghanistan    76.8  ##  3 Angola     Afghanistan     4.65 ##  4 Argentina  Afghanistan   110.   ##  5 Australia  Afghanistan   129.   ##  6 Austria    Afghanistan   124.   ##  7 Bahrain    Afghanistan    98.1  ##  8 Bangladesh Afghanistan    45.3  ##  9 Belgium    Afghanistan   125.   ## 10 Benin      Afghanistan    39.3  ## # … with 20,012 more rows gapminder %>%   pairwise_dist(country, year, lifeExp) %>%   arrange(distance) ## # A tibble: 20,022 × 3 ##    item1          item2          distance ##    <fct>          <fct>             <dbl> ##  1 Germany        Belgium            1.08 ##  2 Belgium        Germany            1.08 ##  3 United Kingdom New Zealand        1.51 ##  4 New Zealand    United Kingdom     1.51 ##  5 Norway         Netherlands        1.56 ##  6 Netherlands    Norway             1.56 ##  7 Italy          Israel             1.66 ##  8 Israel         Italy              1.66 ##  9 Finland        Austria            1.94 ## 10 Austria        Finland            1.94 ## # … with 20,012 more rows gapminder %>%   pairwise_dist(country, year, lifeExp, upper = FALSE) %>%   arrange(distance) ## # A tibble: 10,011 × 3 ##    item1       item2          distance ##    <fct>       <fct>             <dbl> ##  1 Belgium     Germany            1.08 ##  2 New Zealand United Kingdom     1.51 ##  3 Netherlands Norway             1.56 ##  4 Israel      Italy              1.66 ##  5 Austria     Finland            1.94 ##  6 Belgium     United Kingdom     1.95 ##  7 Iceland     Sweden             2.01 ##  8 Comoros     Mauritania         2.01 ##  9 Belgium     United States      2.09 ## 10 Germany     Ireland            2.10 ## # … with 10,001 more rows gapminder %>%   pairwise_cor(country, year, lifeExp, upper = FALSE, sort = TRUE) ## # A tibble: 10,011 × 3 ##    item1        item2                 correlation ##    <fct>        <fct>                       <dbl> ##  1 Indonesia    Mauritania                  1.00  ##  2 Morocco      Senegal                     1.00  ##  3 Saudi Arabia West Bank and Gaza          1.00  ##  4 Brazil       France                      0.999 ##  5 Bahrain      Reunion                     0.999 ##  6 Malaysia     Sao Tome and Principe       0.999 ##  7 Peru         Syria                       0.999 ##  8 Bolivia      Gambia                      0.999 ##  9 Indonesia    Morocco                     0.999 ## 10 Libya        Senegal                     0.999 ## # … with 10,001 more rows"},{"path":"https://juliasilge.github.io/widyr/articles/united_nations.html","id":"pairwise-correlations","dir":"Articles","previous_headings":"","what":"Pairwise correlations","title":"United Nations Voting Correlations","text":"Notice vote column factor, levels (order) “yes”, “abstain”, “”: may interested obtaining measure country--country agreement vote, using pairwise_cor function. , example, find countries US least agreement : can particularly useful visualized map.","code":"levels(un_votes$vote) ## [1] \"yes\"     \"abstain\" \"no\" library(widyr)  cors <- un_votes %>%   mutate(vote = as.numeric(vote)) %>%   pairwise_cor(country, rcid, vote, use = \"pairwise.complete.obs\", sort = TRUE)  cors ## # A tibble: 39,800 × 3 ##    item1     item2     correlation ##    <chr>     <chr>           <dbl> ##  1 Slovakia  Czechia         0.989 ##  2 Czechia   Slovakia        0.989 ##  3 Lithuania Germany         0.978 ##  4 Germany   Lithuania       0.978 ##  5 Lithuania Estonia         0.975 ##  6 Estonia   Lithuania       0.975 ##  7 Lithuania Latvia          0.973 ##  8 Latvia    Lithuania       0.973 ##  9 Slovakia  Slovenia        0.972 ## 10 Slovenia  Slovakia        0.972 ## # … with 39,790 more rows US_cors <- cors %>%   filter(item1 == \"United States\")  # Most in agreement US_cors ## # A tibble: 199 × 3 ##    item1         item2          correlation ##    <chr>         <chr>                <dbl> ##  1 United States United Kingdom       0.575 ##  2 United States Canada               0.570 ##  3 United States Israel               0.546 ##  4 United States Australia            0.514 ##  5 United States Netherlands          0.513 ##  6 United States Luxembourg           0.504 ##  7 United States Belgium              0.498 ##  8 United States Italy                0.470 ##  9 United States Japan                0.462 ## 10 United States France               0.459 ## # … with 189 more rows # Least in agreement US_cors %>%   arrange(correlation) ## # A tibble: 199 × 3 ##    item1         item2          correlation ##    <chr>         <chr>                <dbl> ##  1 United States Belarus             -0.331 ##  2 United States Cuba                -0.313 ##  3 United States Czechoslovakia      -0.275 ##  4 United States Egypt               -0.262 ##  5 United States Russia              -0.261 ##  6 United States Syria               -0.261 ##  7 United States India               -0.241 ##  8 United States Afghanistan         -0.191 ##  9 United States Iraq                -0.189 ## 10 United States Indonesia           -0.188 ## # … with 189 more rows if (require(\"maps\", quietly = TRUE) &&     require(\"fuzzyjoin\", quietly = TRUE) &&     require(\"countrycode\", quietly = TRUE) &&     require(\"ggplot2\", quietly = TRUE)) {   world_data <- map_data(\"world\") %>%     regex_full_join(iso3166, by = c(\"region\" = \"mapname\")) %>%     filter(region != \"Antarctica\")      US_cors %>%     mutate(a2 = countrycode(item2, \"country.name\", \"iso2c\")) %>%     full_join(world_data, by = \"a2\") %>%     ggplot(aes(long, lat, group = group, fill = correlation)) +     geom_polygon(color = \"gray\", size = .1) +     scale_fill_gradient2() +     coord_quickmap() +     theme_void() +     labs(title = \"Correlation of each country's UN votes with the United States\",          subtitle = \"Blue indicates agreement, red indicates disagreement\",          fill = \"Correlation w/ US\") }"},{"path":"https://juliasilge.github.io/widyr/articles/united_nations.html","id":"visualizing-clusters-in-a-network","dir":"Articles","previous_headings":"","what":"Visualizing clusters in a network","title":"United Nations Voting Correlations","text":"Another useful kind visualization network plot, can created Thomas Pedersen’s ggraph package. can filter pairs countries correlations particular threshold.  Choosing threshold filtering correlations (measures similarity) typically requires trial error. Setting high threshold make graph sparse, low threshold make graph crowded.","code":"if (require(\"ggraph\", quietly = TRUE) &&     require(\"igraph\", quietly = TRUE) &&     require(\"countrycode\", quietly = TRUE)) {   cors_filtered <- cors %>%     filter(correlation > .6)      continents <- tibble(country = unique(un_votes$country)) %>%     filter(country %in% cors_filtered$item1 |              country %in% cors_filtered$item2) %>%     mutate(continent = countrycode(country, \"country.name\", \"continent\"))      set.seed(2017)      cors_filtered %>%     graph_from_data_frame(vertices = continents) %>%     ggraph() +     geom_edge_link(aes(edge_alpha = correlation)) +     geom_node_point(aes(color = continent), size = 3) +     geom_node_text(aes(label = name), check_overlap = TRUE, vjust = 1, hjust = 1) +     theme_void() +     labs(title = \"Network of countries with correlated United Nations votes\") }"},{"path":"https://juliasilge.github.io/widyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Robinson. Author. Kanishka Misra. Contributor. Julia Silge. Author, maintainer.","code":""},{"path":"https://juliasilge.github.io/widyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Robinson D, Silge J (2022). widyr: Widen, Process, Re-Tidy Data. https://github.com/juliasilge/widyr, http://juliasilge.github.io/widyr/.","code":"@Manual{,   title = {widyr: Widen, Process, then Re-Tidy Data},   author = {David Robinson and Julia Silge},   year = {2022},   note = {https://github.com/juliasilge/widyr, http://juliasilge.github.io/widyr/}, }"},{"path":"https://juliasilge.github.io/widyr/index.html","id":"widyr-widen-process-and-re-tidy-a-dataset","dir":"","previous_headings":"","what":"widyr: an R package to widen, process, and re-tidy a dataset","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"Authors: Julia Silge, David RobinsonLicense: MIT package wraps pattern un-tidying data wide matrix, performing processing, turning back tidy form. useful several mathematical operations co-occurrence counts, correlations, clustering best done wide matrix.","code":""},{"path":"https://juliasilge.github.io/widyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"can install released version widyr CRAN : development version GitHub :","code":"install.packages(\"widyr\") # install.packages(\"devtools\") devtools::install_github(\"juliasilge/widyr\")"},{"path":"https://juliasilge.github.io/widyr/index.html","id":"towards-a-precise-definition-of-wide-data","dir":"","previous_headings":"","what":"Towards a precise definition of “wide” data","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"term “wide data” gone fashion “imprecise” (Wickham 2014), think proper definition term entirely meaningful useful. wide dataset one matrices : row one item column one feature value one observation matrix one variable want data wide rather tidy? Notable examples include classification, clustering, correlation, factorization, operations can take advantage matrix structure. general, want compare pairs items rather compare variables groups observations, useful structure. widyr package based observation tidy data analysis, often want data wide temporarily, returning tidy structure visualization analysis. widyr makes easy set pairwise_ functions.","code":""},{"path":"https://juliasilge.github.io/widyr/index.html","id":"example-gapminder","dir":"","previous_headings":"","what":"Example: gapminder","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"Consider gapminder dataset gapminder package. tidy format (one-row-per-country-per-year) useful grouping, summarizing, filtering operations. want compare countries (example, find countries similar ), reshape dataset. Note , country item, year feature.","code":"library(dplyr) library(gapminder)  gapminder #> # A tibble: 1,704 × 6 #>    country     continent  year lifeExp      pop gdpPercap #>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl> #>  1 Afghanistan Asia       1952    28.8  8425333      779. #>  2 Afghanistan Asia       1957    30.3  9240934      821. #>  3 Afghanistan Asia       1962    32.0 10267083      853. #>  4 Afghanistan Asia       1967    34.0 11537966      836. #>  5 Afghanistan Asia       1972    36.1 13079460      740. #>  6 Afghanistan Asia       1977    38.4 14880372      786. #>  7 Afghanistan Asia       1982    39.9 12881816      978. #>  8 Afghanistan Asia       1987    40.8 13867957      852. #>  9 Afghanistan Asia       1992    41.7 16317921      649. #> 10 Afghanistan Asia       1997    41.8 22227415      635. #> # … with 1,694 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://juliasilge.github.io/widyr/index.html","id":"pairwise-operations","dir":"","previous_headings":"Example: gapminder","what":"Pairwise operations","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"widyr package offers pairwise_ functions operate pairs items within data. example pairwise_dist: finds Euclidean distance lifeExp value pair countries. knows values compare countries year, feature column. find closest pairs countries overall arrange(): Notice includes duplicates (Germany/Belgium Belgium/Germany). avoid (upper triangle distance matrix), use upper = FALSE: analyses, may interested correlation rather distance pairs. use pairwise_cor:","code":"library(widyr)  gapminder %>%   pairwise_dist(country, year, lifeExp) #> # A tibble: 20,022 × 3 #>    item1      item2       distance #>    <fct>      <fct>          <dbl> #>  1 Albania    Afghanistan   107.   #>  2 Algeria    Afghanistan    76.8  #>  3 Angola     Afghanistan     4.65 #>  4 Argentina  Afghanistan   110.   #>  5 Australia  Afghanistan   129.   #>  6 Austria    Afghanistan   124.   #>  7 Bahrain    Afghanistan    98.1  #>  8 Bangladesh Afghanistan    45.3  #>  9 Belgium    Afghanistan   125.   #> 10 Benin      Afghanistan    39.3  #> # … with 20,012 more rows #> # ℹ Use `print(n = ...)` to see more rows gapminder %>%   pairwise_dist(country, year, lifeExp) %>%   arrange(distance) #> # A tibble: 20,022 × 3 #>    item1          item2          distance #>    <fct>          <fct>             <dbl> #>  1 Germany        Belgium            1.08 #>  2 Belgium        Germany            1.08 #>  3 United Kingdom New Zealand        1.51 #>  4 New Zealand    United Kingdom     1.51 #>  5 Norway         Netherlands        1.56 #>  6 Netherlands    Norway             1.56 #>  7 Italy          Israel             1.66 #>  8 Israel         Italy              1.66 #>  9 Finland        Austria            1.94 #> 10 Austria        Finland            1.94 #> # … with 20,012 more rows #> # ℹ Use `print(n = ...)` to see more rows gapminder %>%   pairwise_dist(country, year, lifeExp, upper = FALSE) %>%   arrange(distance) #> # A tibble: 10,011 × 3 #>    item1       item2          distance #>    <fct>       <fct>             <dbl> #>  1 Belgium     Germany            1.08 #>  2 New Zealand United Kingdom     1.51 #>  3 Netherlands Norway             1.56 #>  4 Israel      Italy              1.66 #>  5 Austria     Finland            1.94 #>  6 Belgium     United Kingdom     1.95 #>  7 Iceland     Sweden             2.01 #>  8 Comoros     Mauritania         2.01 #>  9 Belgium     United States      2.09 #> 10 Germany     Ireland            2.10 #> # … with 10,001 more rows #> # ℹ Use `print(n = ...)` to see more rows gapminder %>%   pairwise_cor(country, year, lifeExp, upper = FALSE) #> # A tibble: 10,011 × 3 #>    item1       item2     correlation #>    <fct>       <fct>           <dbl> #>  1 Afghanistan Albania         0.966 #>  2 Afghanistan Algeria         0.987 #>  3 Albania     Algeria         0.953 #>  4 Afghanistan Angola          0.986 #>  5 Albania     Angola          0.976 #>  6 Algeria     Angola          0.952 #>  7 Afghanistan Argentina       0.971 #>  8 Albania     Argentina       0.949 #>  9 Algeria     Argentina       0.991 #> 10 Angola      Argentina       0.936 #> # … with 10,001 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://juliasilge.github.io/widyr/index.html","id":"code-of-conduct","dir":"","previous_headings":"Example: gapminder","what":"Code of Conduct","title":"widyr: an R package to widen, process, and re-tidy a dataset","text":"project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/cor_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Pearson correlation of a sparse matrix efficiently — cor_sparse","title":"Find the Pearson correlation of a sparse matrix efficiently — cor_sparse","text":"Find Pearson correlation sparse matrix. large sparse matrix efficient time memory cor(.matrix(x)). Note currently work simple_triplet_matrix objects.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/cor_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Pearson correlation of a sparse matrix efficiently — cor_sparse","text":"","code":"cor_sparse(x)"},{"path":"https://juliasilge.github.io/widyr/reference/cor_sparse.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Find the Pearson correlation of a sparse matrix efficiently — cor_sparse","text":"code comes mike Stack Overflow answer: https://stackoverflow.com//9626089/712603.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/cor_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Pearson correlation of a sparse matrix efficiently — cor_sparse","text":"x matrix, potentially sparse matrix \"dgTMatrix\" object","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlations of pairs of items — pairwise_cor","title":"Correlations of pairs of items — pairwise_cor","text":"Find correlations pairs items column, based \"feature\" column links together. example spread-operate-retidy pattern.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlations of pairs of items — pairwise_cor","text":"","code":"pairwise_cor(   tbl,   item,   feature,   value,   method = c(\"pearson\", \"kendall\", \"spearman\"),   use = \"everything\",   ... )  pairwise_cor_(   tbl,   item,   feature,   value,   method = c(\"pearson\", \"kendall\", \"spearman\"),   use = \"everything\",   ... )"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlations of pairs of items — pairwise_cor","text":"tbl Table item Item compare; end item1 item2 columns feature Column describing feature links one item others value Value column. given, defaults values 1 (thus binary correlation) method Correlation method use Character string specifying behavior correlations missing values; passed cor ... Extra arguments passed squarely, diag upper","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlations of pairs of items — pairwise_cor","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(gapminder)  gapminder %>%   pairwise_cor(country, year, lifeExp) #> # A tibble: 20,022 × 3 #>    item1      item2       correlation #>    <fct>      <fct>             <dbl> #>  1 Albania    Afghanistan       0.966 #>  2 Algeria    Afghanistan       0.987 #>  3 Angola     Afghanistan       0.986 #>  4 Argentina  Afghanistan       0.971 #>  5 Australia  Afghanistan       0.939 #>  6 Austria    Afghanistan       0.956 #>  7 Bahrain    Afghanistan       0.996 #>  8 Bangladesh Afghanistan       0.947 #>  9 Belgium    Afghanistan       0.963 #> 10 Benin      Afghanistan       0.997 #> # … with 20,012 more rows  gapminder %>%   pairwise_cor(country, year, lifeExp, sort = TRUE) #> # A tibble: 20,022 × 3 #>    item1              item2              correlation #>    <fct>              <fct>                    <dbl> #>  1 Mauritania         Indonesia                1.00  #>  2 Indonesia          Mauritania               1.00  #>  3 Senegal            Morocco                  1.00  #>  4 Morocco            Senegal                  1.00  #>  5 West Bank and Gaza Saudi Arabia             1.00  #>  6 Saudi Arabia       West Bank and Gaza       1.00  #>  7 France             Brazil                   0.999 #>  8 Brazil             France                   0.999 #>  9 Reunion            Bahrain                  0.999 #> 10 Bahrain            Reunion                  0.999 #> # … with 20,012 more rows  # United Nations voting data if (require(\"unvotes\", quietly = TRUE)) {   country_cors <- un_votes %>%     mutate(vote = as.numeric(vote)) %>%     pairwise_cor(country, rcid, vote, sort = TRUE) } #> If you use data from the unvotes package, please cite the following: #>  #> Erik Voeten \"Data and Analyses of Voting in the UN General Assembly\" Routledge Handbook of International Organization, edited by Bob Reinalda (published May 27, 2013)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count pairs of items within a group — pairwise_count","title":"Count pairs of items within a group — pairwise_count","text":"Count number times pair items appear together within group defined \"feature.\" example, count number times two words appear within documents).","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count pairs of items within a group — pairwise_count","text":"","code":"pairwise_count(tbl, item, feature, wt = NULL, ...)  pairwise_count_(tbl, item, feature, wt = NULL, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count pairs of items within a group — pairwise_count","text":"tbl Table item Item count pairs ; end item1 item2 columns feature Column within count pairs item2 columns wt Optionally weight column, consistent weight feature ... Extra arguments passed squarely, diag, upper, sort","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count pairs of items within a group — pairwise_count","text":"","code":"library(dplyr) dat <- tibble(group = rep(1:5, each = 2),               letter = c(\"a\", \"b\",                          \"a\", \"c\",                          \"a\", \"c\",                          \"b\", \"e\",                          \"b\", \"f\"))  # count the number of times two letters appear together pairwise_count(dat, letter, group) #> # A tibble: 8 × 3 #>   item1 item2     n #>   <chr> <chr> <dbl> #> 1 b     a         1 #> 2 c     a         2 #> 3 a     b         1 #> 4 e     b         1 #> 5 f     b         1 #> 6 a     c         2 #> 7 b     e         1 #> 8 b     f         1 pairwise_count(dat, letter, group, sort = TRUE) #> # A tibble: 8 × 3 #>   item1 item2     n #>   <chr> <chr> <dbl> #> 1 c     a         2 #> 2 a     c         2 #> 3 b     a         1 #> 4 a     b         1 #> 5 e     b         1 #> 6 f     b         1 #> 7 b     e         1 #> 8 b     f         1 pairwise_count(dat, letter, group, sort = TRUE, diag = TRUE) #> # A tibble: 13 × 3 #>    item1 item2     n #>    <chr> <chr> <dbl> #>  1 a     a         3 #>  2 b     b         3 #>  3 c     a         2 #>  4 a     c         2 #>  5 c     c         2 #>  6 b     a         1 #>  7 a     b         1 #>  8 e     b         1 #>  9 f     b         1 #> 10 b     e         1 #> 11 e     e         1 #> 12 b     f         1 #> 13 f     f         1"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta measure of pairs of documents — pairwise_delta","title":"Delta measure of pairs of documents — pairwise_delta","text":"Compute delta distances (two variants) pairs documents tidy table.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta measure of pairs of documents — pairwise_delta","text":"","code":"pairwise_delta(tbl, item, feature, value, method = \"burrows\", ...)  pairwise_delta_(tbl, item, feature, value, method = \"burrows\", ...)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta measure of pairs of documents — pairwise_delta","text":"tbl Table item Item compare; end item1 item2 columns feature Column describing feature links one item others value Value method Distance measure used; see dist() ... Extra arguments passed squarely(), diag upper","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta measure of pairs of documents — pairwise_delta","text":"","code":"library(janeaustenr) library(dplyr) library(tidytext)  # closest documents in terms of 1000 most frequent words closest <- austen_books() %>%   unnest_tokens(word, text) %>%   count(book, word) %>%   top_n(1000, n) %>%   pairwise_delta(book, word, n, method = \"burrows\") %>%   arrange(delta)  closest #> # A tibble: 30 × 3 #>    item1               item2               delta #>    <fct>               <fct>               <dbl> #>  1 Persuasion          Northanger Abbey    0.408 #>  2 Northanger Abbey    Persuasion          0.408 #>  3 Pride & Prejudice   Sense & Sensibility 0.491 #>  4 Sense & Sensibility Pride & Prejudice   0.491 #>  5 Persuasion          Pride & Prejudice   0.769 #>  6 Pride & Prejudice   Persuasion          0.769 #>  7 Northanger Abbey    Pride & Prejudice   0.779 #>  8 Pride & Prejudice   Northanger Abbey    0.779 #>  9 Persuasion          Sense & Sensibility 0.814 #> 10 Sense & Sensibility Persuasion          0.814 #> # … with 20 more rows  closest %>%   filter(item1 == \"Pride & Prejudice\") #> # A tibble: 5 × 3 #>   item1             item2               delta #>   <fct>             <fct>               <dbl> #> 1 Pride & Prejudice Sense & Sensibility 0.491 #> 2 Pride & Prejudice Persuasion          0.769 #> 3 Pride & Prejudice Northanger Abbey    0.779 #> 4 Pride & Prejudice Mansfield Park      1.04  #> 5 Pride & Prejudice Emma                1.09   # to remove duplicates, use upper = FALSE closest <- austen_books() %>%   unnest_tokens(word, text) %>%   count(book, word) %>%   top_n(1000, n) %>%   pairwise_delta(book, word, n, method = \"burrows\", upper = FALSE) %>%   arrange(delta)  # Can also use Argamon's Linear Delta closest <- austen_books() %>%   unnest_tokens(word, text) %>%   count(book, word) %>%   top_n(1000, n) %>%   pairwise_delta(book, word, n, method = \"argamon\", upper = FALSE) %>%   arrange(delta)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances of pairs of items — pairwise_dist","title":"Distances of pairs of items — pairwise_dist","text":"Compute distances pairs items tidy table.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances of pairs of items — pairwise_dist","text":"","code":"pairwise_dist(tbl, item, feature, value, method = \"euclidean\", ...)  pairwise_dist_(tbl, item, feature, value, method = \"euclidean\", ...)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances of pairs of items — pairwise_dist","text":"tbl Table item Item compare; end item1 item2 columns feature Column describing feature links one item others value Value method Distance measure used; see dist() ... Extra arguments passed squarely(), diag upper","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances of pairs of items — pairwise_dist","text":"","code":"library(gapminder) library(dplyr)  # closest countries in terms of life expectancy over time closest <- gapminder %>%   pairwise_dist(country, year, lifeExp) %>%   arrange(distance)  closest #> # A tibble: 20,022 × 3 #>    item1          item2          distance #>    <fct>          <fct>             <dbl> #>  1 Germany        Belgium            1.08 #>  2 Belgium        Germany            1.08 #>  3 United Kingdom New Zealand        1.51 #>  4 New Zealand    United Kingdom     1.51 #>  5 Norway         Netherlands        1.56 #>  6 Netherlands    Norway             1.56 #>  7 Italy          Israel             1.66 #>  8 Israel         Italy              1.66 #>  9 Finland        Austria            1.94 #> 10 Austria        Finland            1.94 #> # … with 20,012 more rows  closest %>%   filter(item1 == \"United States\") #> # A tibble: 141 × 3 #>    item1         item2          distance #>    <fct>         <fct>             <dbl> #>  1 United States Belgium            2.09 #>  2 United States Germany            2.48 #>  3 United States United Kingdom     2.51 #>  4 United States Ireland            2.99 #>  5 United States New Zealand        3.69 #>  6 United States Finland            3.76 #>  7 United States Austria            4.18 #>  8 United States Greece             4.30 #>  9 United States France             4.63 #> 10 United States Denmark            5.26 #> # … with 131 more rows  # to remove duplicates, use upper = FALSE gapminder %>%   pairwise_dist(country, year, lifeExp, upper = FALSE) %>%   arrange(distance) #> # A tibble: 10,011 × 3 #>    item1       item2          distance #>    <fct>       <fct>             <dbl> #>  1 Belgium     Germany            1.08 #>  2 New Zealand United Kingdom     1.51 #>  3 Netherlands Norway             1.56 #>  4 Israel      Italy              1.66 #>  5 Austria     Finland            1.94 #>  6 Belgium     United Kingdom     1.95 #>  7 Iceland     Sweden             2.01 #>  8 Comoros     Mauritania         2.01 #>  9 Belgium     United States      2.09 #> 10 Germany     Ireland            2.10 #> # … with 10,001 more rows  # Can also use Manhattan distance gapminder %>%   pairwise_dist(country, year, lifeExp, method = \"manhattan\", upper = FALSE) %>%   arrange(distance) #> # A tibble: 10,011 × 3 #>    item1       item2          distance #>    <fct>       <fct>             <dbl> #>  1 Belgium     Germany            3.17 #>  2 New Zealand United Kingdom     4.40 #>  3 Netherlands Norway             4.57 #>  4 Belgium     United Kingdom     4.87 #>  5 Israel      Italy              5.17 #>  6 Austria     Finland            5.28 #>  7 Comoros     Mauritania         5.51 #>  8 Greece      Italy              5.73 #>  9 Belgium     United States      5.94 #> 10 France      Italy              6.02 #> # … with 10,001 more rows"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_pmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Pointwise mutual information of pairs of items — pairwise_pmi","title":"Pointwise mutual information of pairs of items — pairwise_pmi","text":"Find pointwise mutual information pairs items column, based \"feature\" column links together. example spread-operate-retidy pattern.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_pmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pointwise mutual information of pairs of items — pairwise_pmi","text":"","code":"pairwise_pmi(tbl, item, feature, sort = FALSE, ...)  pairwise_pmi_(tbl, item, feature, sort = FALSE, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_pmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pointwise mutual information of pairs of items — pairwise_pmi","text":"tbl Table item Item compare; end item1 item2 columns feature Column describing feature links one item others sort Whether sort descending order pointwise mutual information ... Extra arguments passed squarely, diag upper","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_pmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pointwise mutual information of pairs of items — pairwise_pmi","text":"tbl_df three columns, item1, item2, pmi.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_pmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pointwise mutual information of pairs of items — pairwise_pmi","text":"","code":"library(dplyr)  dat <- tibble(group = rep(1:5, each = 2),               letter = c(\"a\", \"b\",                          \"a\", \"c\",                          \"a\", \"c\",                          \"b\", \"e\",                          \"b\", \"f\"))  # how informative is each letter about each other letter pairwise_pmi(dat, letter, group) #> # A tibble: 8 × 3 #>   item1 item2    pmi #>   <chr> <chr>  <dbl> #> 1 b     a     -0.588 #> 2 c     a      0.511 #> 3 a     b     -0.588 #> 4 e     b      0.511 #> 5 f     b      0.511 #> 6 a     c      0.511 #> 7 b     e      0.511 #> 8 b     f      0.511 pairwise_pmi(dat, letter, group, sort = TRUE) #> # A tibble: 8 × 3 #>   item1 item2    pmi #>   <chr> <chr>  <dbl> #> 1 c     a      0.511 #> 2 e     b      0.511 #> 3 f     b      0.511 #> 4 a     c      0.511 #> 5 b     e      0.511 #> 6 b     f      0.511 #> 7 b     a     -0.588 #> 8 a     b     -0.588"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine similarity of pairs of items — pairwise_similarity","title":"Cosine similarity of pairs of items — pairwise_similarity","text":"Compute cosine similarity pairs items tidy table.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine similarity of pairs of items — pairwise_similarity","text":"","code":"pairwise_similarity(tbl, item, feature, value, ...)  pairwise_similarity_(tbl, item, feature, value, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine similarity of pairs of items — pairwise_similarity","text":"tbl Table item Item compare; end item1 item2 columns feature Column describing feature links one item others value Value ... Extra arguments passed squarely(), diag upper","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/pairwise_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine similarity of pairs of items — pairwise_similarity","text":"","code":"library(janeaustenr) library(dplyr) library(tidytext)  # Comparing Jane Austen novels austen_words <- austen_books() %>%   unnest_tokens(word, text) %>%   anti_join(stop_words, by = \"word\") %>%   count(book, word) %>%   ungroup()  # closest books to each other closest <- austen_words %>%   pairwise_similarity(book, word, n) %>%   arrange(desc(similarity))  closest #> # A tibble: 30 × 3 #>    item1               item2               similarity #>    <fct>               <fct>                    <dbl> #>  1 Northanger Abbey    Pride & Prejudice        0.509 #>  2 Pride & Prejudice   Northanger Abbey         0.509 #>  3 Emma                Pride & Prejudice        0.493 #>  4 Pride & Prejudice   Emma                     0.493 #>  5 Mansfield Park      Pride & Prejudice        0.483 #>  6 Pride & Prejudice   Mansfield Park           0.483 #>  7 Northanger Abbey    Emma                     0.480 #>  8 Emma                Northanger Abbey         0.480 #>  9 Pride & Prejudice   Sense & Sensibility      0.479 #> 10 Sense & Sensibility Pride & Prejudice        0.479 #> # … with 20 more rows  closest %>%   filter(item1 == \"Emma\") #> # A tibble: 5 × 3 #>   item1 item2               similarity #>   <fct> <fct>                    <dbl> #> 1 Emma  Pride & Prejudice        0.493 #> 2 Emma  Northanger Abbey         0.480 #> 3 Emma  Mansfield Park           0.473 #> 4 Emma  Sense & Sensibility      0.434 #> 5 Emma  Persuasion               0.410"},{"path":"https://juliasilge.github.io/widyr/reference/squarely.html","id":null,"dir":"Reference","previous_headings":"","what":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","title":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","text":"special case widely(). Used pre-prepare post-tidy functions take m x n (m items, n features) matrix return m x m (item x item) matrix, distance correlation matrix.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/squarely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","text":"","code":"squarely(.f, diag = FALSE, upper = TRUE, ...)  squarely_(.f, diag = FALSE, upper = TRUE, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/squarely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","text":".f Function wrap diag Whether include diagonal (= j) output upper Whether include upper triangle, may duplicated ... Extra arguments passed widely","code":""},{"path":"https://juliasilge.github.io/widyr/reference/squarely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","text":"Returns function takes least four arguments: tbl table item Name column use rows wide matrix feature Name column use columns wide matrix feature Name column use values wide matrix ... Arguments passed inner function","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/squarely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A special case of the widely adverb for creating tidy\nsquare matrices — squarely","text":"","code":"library(dplyr) library(gapminder)  closest_continent <- gapminder %>%   group_by(continent) %>%   squarely(dist)(country, year, lifeExp)"},{"path":"https://juliasilge.github.io/widyr/reference/widely.html","id":null,"dir":"Reference","previous_headings":"","what":"Adverb for functions that operate on matrices in ","title":"Adverb for functions that operate on matrices in ","text":"Modify function order pre-cast input wide matrix format, perform function, re-tidy (e.g. melt) output tidy table.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adverb for functions that operate on matrices in ","text":"","code":"widely(.f, sort = FALSE, sparse = FALSE, maximum_size = 1e+07)  widely_(.f, sort = FALSE, sparse = FALSE, maximum_size = 1e+07)"},{"path":"https://juliasilge.github.io/widyr/reference/widely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adverb for functions that operate on matrices in ","text":".f Function wrapped sort Whether sort descending order value sparse Whether cast sparse matrix maximum_size prevent crashing, maximum size non-sparse matrix created. Set NULL allow size matrix.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adverb for functions that operate on matrices in ","text":"Returns function takes least four arguments: tbl table row Name column use rows wide matrix column Name column use columns wide matrix value Name column use values wide matrix ... Arguments passed inner function widely creates function takes columns bare names, widely_ function takes strings.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adverb for functions that operate on matrices in ","text":"","code":"library(dplyr) library(gapminder)  gapminder #> # A tibble: 1,704 × 6 #>    country     continent  year lifeExp      pop gdpPercap #>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl> #>  1 Afghanistan Asia       1952    28.8  8425333      779. #>  2 Afghanistan Asia       1957    30.3  9240934      821. #>  3 Afghanistan Asia       1962    32.0 10267083      853. #>  4 Afghanistan Asia       1967    34.0 11537966      836. #>  5 Afghanistan Asia       1972    36.1 13079460      740. #>  6 Afghanistan Asia       1977    38.4 14880372      786. #>  7 Afghanistan Asia       1982    39.9 12881816      978. #>  8 Afghanistan Asia       1987    40.8 13867957      852. #>  9 Afghanistan Asia       1992    41.7 16317921      649. #> 10 Afghanistan Asia       1997    41.8 22227415      635. #> # … with 1,694 more rows  gapminder %>%   widely(dist)(country, year, lifeExp) #> # A tibble: 10,011 × 3 #>    item1       item2       value #>    <fct>       <fct>       <dbl> #>  1 Afghanistan Albania    107.   #>  2 Afghanistan Algeria     76.8  #>  3 Afghanistan Angola       4.65 #>  4 Afghanistan Argentina  110.   #>  5 Afghanistan Australia  129.   #>  6 Afghanistan Austria    124.   #>  7 Afghanistan Bahrain     98.1  #>  8 Afghanistan Bangladesh  45.3  #>  9 Afghanistan Belgium    125.   #> 10 Afghanistan Benin       39.3  #> # … with 10,001 more rows  # can perform within groups closest_continent <- gapminder %>%   group_by(continent) %>%   widely(dist)(country, year, lifeExp) closest_continent #> # A tibble: 2,590 × 4 #> # Groups:   continent [5] #>    continent item1       item2            value #>    <fct>     <fct>       <fct>            <dbl> #>  1 Asia      Afghanistan Bahrain           98.1 #>  2 Asia      Afghanistan Bangladesh        45.3 #>  3 Asia      Afghanistan Cambodia          41.8 #>  4 Asia      Afghanistan China             86.2 #>  5 Asia      Afghanistan Hong Kong, China 125.  #>  6 Asia      Afghanistan India             56.1 #>  7 Asia      Afghanistan Indonesia         62.3 #>  8 Asia      Afghanistan Iran              74.5 #>  9 Asia      Afghanistan Iraq              66.9 #> 10 Asia      Afghanistan Israel           125.  #> # … with 2,580 more rows  # for example, find the closest pair in each closest_continent %>%   top_n(1, -value) #> # A tibble: 5 × 4 #> # Groups:   continent [5] #>   continent item1     item2              value #>   <fct>     <fct>     <fct>              <dbl> #> 1 Asia      Jordan    West Bank and Gaza  2.94 #> 2 Europe    Belgium   Germany             1.08 #> 3 Africa    Comoros   Mauritania          2.01 #> 4 Americas  Honduras  Peru                3.95 #> 5 Oceania   Australia New Zealand         3.55"},{"path":"https://juliasilge.github.io/widyr/reference/widely_hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster pairs of items into groups using hierarchical clustering — widely_hclust","title":"Cluster pairs of items into groups using hierarchical clustering — widely_hclust","text":"Reshape table represents pairwise distances hierarchical clusters, returning table item cluster columns.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely_hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster pairs of items into groups using hierarchical clustering — widely_hclust","text":"","code":"widely_hclust(tbl, item1, item2, distance, k = NULL, h = NULL)"},{"path":"https://juliasilge.github.io/widyr/reference/widely_hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster pairs of items into groups using hierarchical clustering — widely_hclust","text":"tbl Table item1 First item item2 Second item distance Distance column k desired number groups h Height cut hierarchically clustered tree","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/widely_hclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster pairs of items into groups using hierarchical clustering — widely_hclust","text":"","code":"library(gapminder) library(dplyr)  # Construct Euclidean distances between countries based on life # expectancy over time country_distances <- gapminder %>%   pairwise_dist(country, year, lifeExp)  country_distances #> # A tibble: 20,022 × 3 #>    item1      item2       distance #>    <fct>      <fct>          <dbl> #>  1 Albania    Afghanistan   107.   #>  2 Algeria    Afghanistan    76.8  #>  3 Angola     Afghanistan     4.65 #>  4 Argentina  Afghanistan   110.   #>  5 Australia  Afghanistan   129.   #>  6 Austria    Afghanistan   124.   #>  7 Bahrain    Afghanistan    98.1  #>  8 Bangladesh Afghanistan    45.3  #>  9 Belgium    Afghanistan   125.   #> 10 Benin      Afghanistan    39.3  #> # … with 20,012 more rows  # Turn this into 5 hierarchical clusters clusters <- country_distances %>%   widely_hclust(item1, item2, distance, k = 8)  # Examine a few such clusters clusters %>% filter(cluster == 1) #> # A tibble: 27 × 2 #>    item                   cluster #>    <chr>                  <fct>   #>  1 Albania                1       #>  2 Argentina              1       #>  3 Bosnia and Herzegovina 1       #>  4 Bulgaria               1       #>  5 Costa Rica             1       #>  6 Croatia                1       #>  7 Cuba                   1       #>  8 Czech Republic         1       #>  9 Hungary                1       #> 10 Jamaica                1       #> # … with 17 more rows clusters %>% filter(cluster == 2) #> # A tibble: 26 × 2 #>    item        cluster #>    <chr>       <fct>   #>  1 Algeria     2       #>  2 China       2       #>  3 Egypt       2       #>  4 El Salvador 2       #>  5 Guatemala   2       #>  6 Honduras    2       #>  7 India       2       #>  8 Indonesia   2       #>  9 Iran        2       #> 10 Iraq        2       #> # … with 16 more rows"},{"path":"https://juliasilge.github.io/widyr/reference/widely_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster items based on k-means across features — widely_kmeans","title":"Cluster items based on k-means across features — widely_kmeans","text":"Given tidy table features describing item, perform k-means clustering using kmeans() retidy data one-row-per-cluster.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster items based on k-means across features — widely_kmeans","text":"","code":"widely_kmeans(tbl, item, feature, value, k, fill = 0, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/widely_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster items based on k-means across features — widely_kmeans","text":"tbl Table item Item cluster (bare column name) feature Feature column (dimension clustering) value Value column k Number clusters fill fill missing values ... arguments passed kmeans()","code":""},{"path":[]},{"path":"https://juliasilge.github.io/widyr/reference/widely_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster items based on k-means across features — widely_kmeans","text":"","code":"library(gapminder) library(dplyr)  clusters <- gapminder %>%   widely_kmeans(country, year, lifeExp, k = 5)  clusters #> # A tibble: 142 × 2 #>    country     cluster #>    <fct>       <fct>   #>  1 Bangladesh  1       #>  2 Bolivia     1       #>  3 Botswana    1       #>  4 Comoros     1       #>  5 Congo, Rep. 1       #>  6 Gabon       1       #>  7 Ghana       1       #>  8 Haiti       1       #>  9 India       1       #> 10 Indonesia   1       #> # … with 132 more rows  clusters %>%   count(cluster) #> # A tibble: 5 × 2 #>   cluster     n #>   <fct>   <int> #> 1 1          23 #> 2 2          33 #> 3 3          26 #> 4 4           8 #> 5 5          52  # Examine a few clusters clusters %>% filter(cluster == 1) #> # A tibble: 23 × 2 #>    country     cluster #>    <fct>       <fct>   #>  1 Bangladesh  1       #>  2 Bolivia     1       #>  3 Botswana    1       #>  4 Comoros     1       #>  5 Congo, Rep. 1       #>  6 Gabon       1       #>  7 Ghana       1       #>  8 Haiti       1       #>  9 India       1       #> 10 Indonesia   1       #> # … with 13 more rows clusters %>% filter(cluster == 2) #> # A tibble: 33 × 2 #>    country            cluster #>    <fct>              <fct>   #>  1 Algeria            2       #>  2 Bahrain            2       #>  3 Brazil             2       #>  4 China              2       #>  5 Colombia           2       #>  6 Dominican Republic 2       #>  7 Ecuador            2       #>  8 Egypt              2       #>  9 El Salvador        2       #> 10 Guatemala          2       #> # … with 23 more rows"},{"path":"https://juliasilge.github.io/widyr/reference/widely_svd.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","title":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","text":"useful dimensionality reduction items, especially setting lower nv.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely_svd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","text":"","code":"widely_svd(tbl, item, feature, value, nv = NULL, weight_d = FALSE, ...)  widely_svd_(tbl, item, feature, value, nv = NULL, weight_d = FALSE, ...)"},{"path":"https://juliasilge.github.io/widyr/reference/widely_svd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","text":"tbl Table item Item perform dimensionality reduction ; end item column feature Column describing feature links one item others. value Value nv Optional; number principal components estimate. Recommended matrices many features. weight_d Whether multiply value d principal component. ... Extra arguments passed svd (nv NULL) irlba (nv given)","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely_svd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","text":"tbl_df three columns. first retained item input, dimension value. row represents one principal component value.","code":""},{"path":"https://juliasilge.github.io/widyr/reference/widely_svd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn into a wide matrix, perform SVD, return to tidy form — widely_svd","text":"","code":"library(dplyr) library(gapminder)  # principal components driving change gapminder_svd <- gapminder %>%   widely_svd(country, year, lifeExp)  gapminder_svd #> # A tibble: 1,704 × 3 #>    country     dimension   value #>    <fct>           <int>   <dbl> #>  1 Afghanistan         1 -0.0522 #>  2 Albania             1 -0.0949 #>  3 Algeria             1 -0.0824 #>  4 Angola              1 -0.0526 #>  5 Argentina           1 -0.0955 #>  6 Australia           1 -0.103  #>  7 Austria             1 -0.101  #>  8 Bahrain             1 -0.0913 #>  9 Bangladesh          1 -0.0696 #> 10 Belgium             1 -0.102  #> # … with 1,694 more rows  # compare SVDs, join with other data library(ggplot2) library(tidyr)  gapminder_svd %>%   spread(dimension, value) %>%   inner_join(distinct(gapminder, country, continent), by = \"country\") %>%   ggplot(aes(`1`, `2`, label = country)) +   geom_point(aes(color = continent)) +   geom_text(vjust = 1, hjust = 1)"},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-development-version","dir":"Changelog","previous_headings":"","what":"widyr (development version)","title":"widyr (development version)","text":"Change maintainer Julia Silge Updates new Matrix package version (@simonpcouch, #41)","code":""},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-014","dir":"Changelog","previous_headings":"","what":"widyr 0.1.4","title":"widyr 0.1.4","text":"CRAN release: 2021-08-12 Fix bug United Nations vignette (caused unvotes update). Also changes vignettes render conditionally package installation.","code":""},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-013","dir":"Changelog","previous_headings":"","what":"widyr 0.1.3","title":"widyr 0.1.3","text":"CRAN release: 2020-04-12 Update work latest version tidytext’s cast_sparse. Adds rlang IMPORTs. (@juliasilge, #30) Update data_frame() tibble() examples Removed topicmodels SUGGESTS (hasn’t required several versions) Fixed spelling mistakes occurence->occurrence","code":""},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-012","dir":"Changelog","previous_headings":"","what":"widyr 0.1.2","title":"widyr 0.1.2","text":"CRAN release: 2019-09-09 Fixes compatible tidyr v1.0.0, also reverse-compatible previous versions tidyr. Fix intro vignette index entry","code":""},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-011","dir":"Changelog","previous_headings":"","what":"widyr 0.1.1","title":"widyr 0.1.1","text":"CRAN release: 2018-03-11 Added pairwise_delta function Burrows’ delta Added pairwise_pmi pairwise mutual information Added widely_svd performing singular value decomposition re-tidying Removed methods DESCRIPTION","code":""},{"path":"https://juliasilge.github.io/widyr/news/index.html","id":"widyr-010","dir":"Changelog","previous_headings":"","what":"widyr 0.1.0","title":"widyr 0.1.0","text":"CRAN release: 2017-08-14 Initial release package functions pairwise_ collection functions, well widely squarely adverbs.","code":""}]
